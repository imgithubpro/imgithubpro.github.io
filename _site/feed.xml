<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>imgithubpro</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/</link>
    <description></description>
    <pubDate>Thu, 03 May 2018 00:32:02 +0900</pubDate>
    
      <item>
        <title>Elasticsearch 데이터 탐색하기</title>
        <link>/elastic/2018/05/03/001.html</link>
        <guid isPermaLink="true">/elastic/2018/05/03/001.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;샘플 데이터를 사용하여 Elasticsearch의 데이터 탐색 기능들을 테스트한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;데이터 탐색&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;샘플 데이터 집합 로드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json&quot;&gt;데이터 집합&lt;/a&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;accounts.json&lt;/code&gt;으로 저장&lt;/li&gt;
  &lt;li&gt;해당 파일을 클러스터에 로드
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -H &quot;Content-Type: application/json&quot; -XPOST 'localhost:9200/bank/account/_bulk?pretty&amp;amp;refresh' --data-binary &quot;@accounts.json&quot;
$ curl 'localhost:9200/_cat/indices?v'
health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   bank     G1qJ7B-FTkS4Ut6R41dq9A   5   1       1000            0    648.2kb        648.2kb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;검색 API&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;검색 실행 방법 : REST 요청 URL을 통해 검색 매개변수를 보내는 방법 &amp;amp; REST 요청 본문을 통해 보내는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;검색을 위한 REST API는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_search&lt;/code&gt; 엔드포인트에서 액세스 가능&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bank 인덱스의 모든 문서를 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?q=*&amp;amp;sort=account_number:asc&amp;amp;pretty&quot;
{
  &quot;took&quot; : 217,
  &quot;timed_out&quot; : false,
  &quot;_shards&quot; : {
    &quot;total&quot; : 5,
    &quot;successful&quot; : 5,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {
    &quot;total&quot; : 1000,
    &quot;max_score&quot; : null,
    &quot;hits&quot; : [
      {
        &quot;_index&quot; : &quot;bank&quot;,
        &quot;_type&quot; : &quot;account&quot;,
        &quot;_id&quot; : &quot;0&quot;,
        &quot;_score&quot; : null,
        &quot;_source&quot; : {
          &quot;account_number&quot; : 0,
          &quot;balance&quot; : 16623,
          &quot;firstname&quot; : &quot;Bradshaw&quot;,
          &quot;lastname&quot; : &quot;Mckenzie&quot;,
          &quot;age&quot; : 29,
          &quot;gender&quot; : &quot;F&quot;,
          &quot;address&quot; : &quot;244 Columbus Place&quot;,
          &quot;employer&quot; : &quot;Euron&quot;,
          &quot;email&quot; : &quot;bradshawmckenzie@euron.com&quot;,
          &quot;city&quot; : &quot;Hobucken&quot;,
          &quot;state&quot; : &quot;CO&quot;
        },
        &quot;sort&quot; : [
          0
        ]
      },
      {
        &quot;_index&quot; : &quot;bank&quot;,
	...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;q=* 매개변수로 모든 문서를 비교하여 일치 여부를 확인&lt;/li&gt;
  &lt;li&gt;sort=account_number:asc 매개변수는 각 문서의 account_number 필드를 기준으로 오름차순&lt;/li&gt;
  &lt;li&gt;응답 확인
    &lt;ul&gt;
      &lt;li&gt;took - 검색을 실행하는데 걸린 시간(밀리초)&lt;/li&gt;
      &lt;li&gt;timed_out - 검색의 시간 초과 여부&lt;/li&gt;
      &lt;li&gt;_shards - 검색한 샤드 수 및 검색에 성공/실패한 샤드 수&lt;/li&gt;
      &lt;li&gt;hits - 검색 결과&lt;/li&gt;
      &lt;li&gt;hits.total - 검색 조건과 일치하는 문서의 총 개수&lt;/li&gt;
      &lt;li&gt;hits.hits - 검색 결과의 실제 배열(기본 설정은 처음 10개 문서)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;동일한 내용을 요청 본문 방식을 사용할 경우&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search&quot;\
&amp;gt;      -d '{
&amp;gt;        &quot;query&quot;: { &quot;match_all&quot;: {} },
&amp;gt;        &quot;sort&quot;: [
&amp;gt;          { &quot;account_number&quot;: &quot;asc&quot; }
&amp;gt;        ]
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;쿼리 언어 소개&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;QueryDSL이라는 JSON 스타일의 도메인 전용 언어 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앞에서 봤던 마지막 예제&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search&quot; -d '{
&quot;query&quot; : { &quot;match_all&quot; : {} }
}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; 부분은 쿼리 정의가 무엇인지 알려줌&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match_all&lt;/code&gt; 부분은 실행하려는 쿼리의 유형으로 지정된 인덱스의 모든 문서를 검색&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; 매개변수 외에 다른 배개변수 전달&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;        &quot;query&quot;: { &quot;match_all&quot;: {} },
&amp;gt;        &quot;size&quot;: 1
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;가 지정되지 않으면 기본값은 10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 문서 11~20을 반환하는 예제&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;        &quot;query&quot;: { &quot;match_all&quot;: {} },
&amp;gt;        &quot;from&quot; : 10,
&amp;gt;        &quot;size&quot;: 10
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match_all&lt;/code&gt; 을 수행하고 잔액을 기준으로 10개(기본크기)를 내림차순 정렬&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;        &quot;query&quot;: { &quot;match_all&quot;: {} },
&amp;gt;        &quot;sort&quot;: { &quot;balance&quot; : { &quot;order&quot; : &quot;desc&quot; } }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;검색 실행&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Query DSL 을 좀 더 자세히 살펴본다.&lt;/li&gt;
  &lt;li&gt;전체 JSON 문서가 모든 검색의 일부로 반환되며 이를 _source 필드라고 함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;_source 중 일부 필드만 반환되도록 테스트&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;        &quot;query&quot;: { &quot;match_all&quot;: {} },
&amp;gt;        &quot;_source&quot;: [ &quot;account_number&quot;, &quot;balance&quot; ]
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;SQL SELECT FROM 필드와 비슷함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;match 쿼리 예제&lt;/h3&gt;

&lt;p&gt;번호가 20인 계정&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: { &quot;match&quot;: { &quot;account_number&quot; : 20 } }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주소에 “mill”이라는 용어가 있는 모든 계정&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: { &quot;match_phrase&quot;: { &quot;address&quot; : &quot;mill lane&quot; } }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;bool(Boolean)쿼리&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool must&lt;/code&gt; 절에 지정된 모든 쿼리가 true가 되는 문서&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: {
&amp;gt;           &quot;bool&quot; : {
&amp;gt;               &quot;must&quot; : [
&amp;gt;                 { &quot;match&quot; : { &quot;address&quot; : &quot;mill&quot; } },
&amp;gt;                 { &quot;match&quot; : { &quot;address&quot; : &quot;lane&quot; } }
&amp;gt;               ]
&amp;gt;             }
&amp;gt;       }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;“mill”과 “lane”이 있는 모든 계정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool should&lt;/code&gt; 절에 지정된 쿼리 중 하나라도 true가 되는 문서&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: {
&amp;gt;           &quot;bool&quot; : {
&amp;gt;               &quot;should&quot; : [
&amp;gt;                 { &quot;match&quot; : { &quot;address&quot; : &quot;mill&quot; } },
&amp;gt;                 { &quot;match&quot; : { &quot;address&quot; : &quot;lane&quot; } }
&amp;gt;               ]
&amp;gt;             }
&amp;gt;       }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;“mill” 또는 “lane”이 있는 모든 계정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;must_not&lt;/code&gt; 사용&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: {
&amp;gt;           &quot;bool&quot; : {
&amp;gt;               &quot;must_not&quot; : [
&amp;gt;                 { &quot;match&quot; : { &quot;address&quot; : &quot;mill&quot; } },
&amp;gt;                 { &quot;match&quot; : { &quot;address&quot; : &quot;lane&quot; } }
&amp;gt;               ]
&amp;gt;             }
&amp;gt;       }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;must_not&lt;/code&gt;에 지정된 쿼리 중 어느 것도 true가 아닌 문서&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하나의 bool 쿼리 내에 must, should, must_not 절을 동시에 조합&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: {
&amp;gt;           &quot;bool&quot; : {
&amp;gt;               &quot;must&quot; : [
&amp;gt;                 { &quot;match&quot; : { &quot;age&quot; : &quot;40&quot; } }
&amp;gt;               ],
&amp;gt;               &quot;must_not&quot; : [
&amp;gt;                 { &quot;match&quot; : { &quot;state&quot; : &quot;ID&quot; } }
&amp;gt;               ]
&amp;gt;             }
&amp;gt;       }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;필터 실행&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool 쿼리&lt;/code&gt;의 filter절을 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;range쿼리&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;       &quot;query&quot;: {
&amp;gt;           &quot;bool&quot; : {
&amp;gt;               &quot;must&quot; : { &quot;match_all&quot; : {} },
&amp;gt;               &quot;filter&quot; : {
&amp;gt;                   &quot;range&quot; : {
&amp;gt;                       &quot;balance&quot; : {
&amp;gt;                           &quot;gte&quot; : 20000,
&amp;gt;                           &quot;lte&quot; : 30000
&amp;gt;                       }
&amp;gt;                   }
&amp;gt;               }
&amp;gt;             }
&amp;gt;       }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;집계 실행&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;SQL GROUP BY 및 SQL 집계 기능과 유사&lt;/li&gt;
  &lt;li&gt;하나의 응답에서 검색과 동시에 그와 별도로 집계 결과 반환 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주를 기준으로 그룹화하고 내림차순(기본 설정)으로 상위 10개(기본 설정) 주 반환&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;          &quot;size&quot; : 0,
&amp;gt;         &quot;aggs&quot; : {
&amp;gt;             &quot;group_by_state&quot; : {
&amp;gt;                 &quot;terms&quot; : {
&amp;gt;                     &quot;field&quot; : &quot;state.keyword&quot;
&amp;gt;                 }
&amp;gt;             }
&amp;gt;         }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;개념상 다음 SQL 과 비슷&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT state, COUNT(*) FROM bank GROUP BY state ORDER BY COUNT(*) DESC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 응답의 일부&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;aggregations&quot; : {
    &quot;group_by_state&quot; : {
      &quot;doc_count_error_upper_bound&quot; : 20,
      &quot;sum_other_doc_count&quot; : 770,
      &quot;buckets&quot; : [
        {
          &quot;key&quot; : &quot;ID&quot;,
          &quot;doc_count&quot; : 27
        },
        {
          &quot;key&quot; : &quot;TX&quot;,
          &quot;doc_count&quot; : 27
        },
        {
          &quot;key&quot; : &quot;AL&quot;,
          &quot;doc_count&quot; : 25
        },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;응답에서 집계 결과만 보고 검색 결과는 표시하지 않기 위해 size=0으로 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앞의 집계를 바탕으로 주별 평균 계좌 잔액을 내림차순으로 정렬&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;calhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;          &quot;size&quot; : 0,
&amp;gt;         &quot;aggs&quot; : {
&amp;gt;             &quot;group_by_state&quot; : {
&amp;gt;                 &quot;terms&quot; : {
&amp;gt;                     &quot;field&quot; : &quot;state.keyword&quot;,
&amp;gt;                     &quot;order&quot; : {
&amp;gt;                         &quot;average_balance&quot; : &quot;desc&quot;
&amp;gt;                     }
&amp;gt;                 },
&amp;gt;                 &quot;aggs&quot; : {
&amp;gt;                     &quot;average_balance&quot; : {
&amp;gt;                         &quot;avg&quot; : {
&amp;gt;                             &quot;field&quot; : &quot;balance&quot;
&amp;gt;                         }
&amp;gt;                     }
&amp;gt;                 }
&amp;gt;             }
&amp;gt;         }
&amp;gt;      }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;연령대(20-29, 30-39, 40-49)를 기준으로, 성별로 그룹화하고 연령대, 성별 기준 평균 계정 잔액&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/bank/_search?pretty&quot;\
&amp;gt;      -d '{
&amp;gt;           &quot;size&quot;: 0,
&amp;gt;           &quot;aggs&quot;: {
&amp;gt;             &quot;group_by_age&quot;: {
&amp;gt;               &quot;range&quot;: {
&amp;gt;                 &quot;field&quot;: &quot;age&quot;,
&amp;gt;                 &quot;ranges&quot;: [
&amp;gt;                   {
&amp;gt;                     &quot;from&quot;: 20,
&amp;gt;                     &quot;to&quot;: 30
&amp;gt;                   },
&amp;gt;                   {
&amp;gt;                     &quot;from&quot;: 30,
&amp;gt;                     &quot;to&quot;: 40
&amp;gt;                   },
&amp;gt;                   {
&amp;gt;                     &quot;from&quot;: 40,
&amp;gt;                     &quot;to&quot;: 50
&amp;gt;                   }
&amp;gt;                 ]
&amp;gt;               },
&amp;gt;               &quot;aggs&quot;: {
&amp;gt;                 &quot;group_by_gender&quot;: {
&amp;gt;                   &quot;terms&quot;: {
&amp;gt;                     &quot;field&quot;: &quot;gender.keyword&quot;
&amp;gt;                   },
&amp;gt;                   &quot;aggs&quot;: {
&amp;gt;                     &quot;average_balance&quot;: {
&amp;gt;                       &quot;avg&quot;: {
&amp;gt;                         &quot;field&quot;: &quot;balance&quot;
&amp;gt;                       }
&amp;gt;                     }
&amp;gt;                   }
&amp;gt;                 }
&amp;gt;               }
&amp;gt;             }
&amp;gt;           }
&amp;gt;         }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 03 May 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Elasticsearch REST API 시작하기</title>
        <link>/elastic/2018/05/02/001.html</link>
        <guid isPermaLink="true">/elastic/2018/05/02/001.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;REST API를 사용하여 Elasticsearch의 각 기능을 살펴본다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;클러스터 API&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;을 사용해서 테스트 
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;클러스터 상태&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/_cat/health?v&quot;
epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1525159681 16:28:01  elasticsearch green           1         1      0   0    0    0        0             0                  -                100.0%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;status : 클러스터의 상태 값은 녹색/노란색/빨간색 중 하나
    &lt;ul&gt;
      &lt;li&gt;green : 클러스터 정상 작동&lt;/li&gt;
      &lt;li&gt;yellow : 모든 데이터가 사용 가능한 상태이지만 일부 리플리카가 아직 배정되지 않은 상태(클러스터는 정상 작동 중)&lt;/li&gt;
      &lt;li&gt;red : 어떤 이유로 일부 데이터가 사용할 수 없는 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클러스터 노드 목록&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/_cat/nodes?v&quot;
ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
127.0.0.1           12          97   1    0.14    0.08     0.11 mdi       *      FxRG3ga
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;인덱스 확인&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/_cat/indices?v&quot;
health status index uuid pri rep docs.count docs.deleted store.size pri.store.size
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;아직 클러스터에 인덱스가 없는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인덱스 생성&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X PUT &quot;localhost:9200/customer?pretty&quot;
{
	&quot;acknowledged&quot; : true,
	&quot;shards_acknowledged&quot; : true
}
$ curl -X GET &quot;localhost:9200/_cat/indices?v&quot;
health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   customer TStBp1JvQ3ii3xvAZmRAlw   5   1          0            0       650b           650b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;PUT을 통해 “customer”라는 인덱스 생성&lt;/li&gt;
  &lt;li&gt;마지막 &lt;code class=&quot;highlighter-rouge&quot;&gt;pretty&lt;/code&gt;를 추가할 경우, JSON응답이 있다면 pretty-print 수행&lt;/li&gt;
  &lt;li&gt;두 번째 명령의 결과를 보면 customer라는 인덱스 1개가 있고 이 인덱스는 기본 샤드 5개, 리플리카 1개로 포함된 다큐먼트는 0개&lt;/li&gt;
  &lt;li&gt;customer 인덱스는 노란색 상태 태그로 표시
    &lt;ul&gt;
      &lt;li&gt;Elasticsearch에서는 기본적으로 인덱스에 대해 리플리카를 1개 생성&lt;/li&gt;
      &lt;li&gt;이 리플리카가 하나의 노드에서 실행 중이므로 고가용성을 위해 배정될 수 없음&lt;/li&gt;
      &lt;li&gt;나중에 이 리플리카가 두 번째 노드에 배정 시 녹색으로 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;다큐먼트 인덱싱 및 쿼리&lt;/h3&gt;

&lt;p&gt;Elasticsearch에서 데이터에 액세스하는 패턴&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;REST Verb&amp;gt; /&amp;lt;Index&amp;gt;/&amp;lt;Type&amp;gt;/&amp;lt;ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다큐먼트 추가&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X PUT &quot;localhost:9200/customer/external/1?pretty&quot;\
&amp;gt;      -d '{&quot;name&quot;:&quot;John Doe&quot;}'
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 1,
  &quot;result&quot; : &quot;created&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  },
  &quot;created&quot; : true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;customer 색인 및 external 타입에 새 고객 문서가 생성&lt;/li&gt;
  &lt;li&gt;Elasticsearch는 문서를 인덱싱하기 전에 명시적으로 인덱스를 생성할 필요가 없음&lt;/li&gt;
  &lt;li&gt;앞의 예에서 customer 인덱스가 없으면 자동으로 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;방금 인덱싱한 문서 검색&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET &quot;localhost:9200/customer/external/1?pretty&quot;
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 1,
  &quot;found&quot; : true,
  &quot;_source&quot; : {
    &quot;name&quot; : &quot;John Doe&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;found&lt;/code&gt; : 요청된 ID 1에 해당하는 문서를 찾았다고 알려줌&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_source&lt;/code&gt; : JSON 문서 전체를 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;인덱스 삭제&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X DELETE &quot;localhost:9200/customer?pretty&quot;
{
  &quot;acknowledged&quot; : true
}
$ curl -X GET &quot;localhost:9200/_cat/indices?v&quot;
health status index uuid pri rep docs.count docs.deleted store.size pri.store.size
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;데이터 수정&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;데이터는 인덱싱/업데이트/삭제하는 시점부터 검색 결과에 나타나는 시점까지 1초 정도 소요(새로고침 간격)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;문서 인덱싱/대체&lt;/h3&gt;

&lt;p&gt;앞서 단일 문서 인덱싱 예제를 다시 실행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X PUT &quot;localhost:9200/customer/external/1?pretty&quot;\
&amp;gt;       -d '{&quot;name&quot;:&quot;John Doe&quot;}'
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 1,
  &quot;result&quot; : &quot;created&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  },
  &quot;created&quot; : true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문서의 내용을 바꿔서 동일하게 다시 실행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X PUT &quot;localhost:9200/customer/external/1?pretty&quot;\
&amp;gt;          -d '{&quot;name&quot;:&quot;Jane Doe&quot;}'
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 2,
  &quot;result&quot; : &quot;updated&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  },
  &quot;created&quot; : false
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ID가 1인 문서의 name이 “John doe”에서 “Jane Doe”로 바뀜&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ID없이 인덱싱하는 경우&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST &quot;localhost:9200/customer/external?pretty&quot;\
&amp;gt;          -d '{&quot;name&quot;:&quot;Jane Doe&quot;}'
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;AWMb2NtytvPg5vPfDWWF&quot;,
  &quot;_version&quot; : 1,
  &quot;result&quot; : &quot;created&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  },
  &quot;created&quot; : true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ID를 지정하지 않으면 PUT대신 POST 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;문서 업데이트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;문서를 업데이트하면 기존 문서가 삭제되고 새 문서를 인덱싱한 후 여기에 업데이트 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST &quot;localhost:9200/customer/external/1/_update?pretty&quot;\
&amp;gt;          -d '{&quot;doc&quot;:{&quot;name&quot;:&quot;Jane Doe&quot;, &quot;age&quot;:20}}'
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 3,
  &quot;result&quot; : &quot;updated&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스크립트를 통한 업데이트&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST &quot;localhost:9200/customer/external/1/_update?pretty&quot;\
&amp;gt;          -d '{&quot;script&quot; : &quot;ctx._source.age += 5&quot;}'
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 4,
  &quot;result&quot; : &quot;updated&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  }
}
$ curl -X GET &quot;localhost:9200/customer/external/1?pretty&quot;
{
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 4,
  &quot;found&quot; : true,
  &quot;_source&quot; : {
    &quot;name&quot; : &quot;Jane Doe&quot;,
    &quot;age&quot; : 25
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctx._source&lt;/code&gt;는 업데이트하려는 현재 소스 문서&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;문서 삭제&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X DELETE &quot;localhost:9200/customer/external/1?pretty&quot;
{
  &quot;found&quot; : true,
  &quot;_index&quot; : &quot;customer&quot;,
  &quot;_type&quot; : &quot;external&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 5,
  &quot;result&quot; : &quot;deleted&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;배치 처리&lt;/h3&gt;

&lt;p&gt;간단한 예로 하나의 벌크 호출로 문서 2개를 인덱싱&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST &quot;localhost:9200/customer/external/_bulk?pretty&quot;\
&amp;gt;  -d '{&quot;index&quot;:{&quot;_id&quot;:&quot;1&quot;}}
&amp;gt; {&quot;name&quot;:&quot;John Doe&quot;}
&amp;gt; {&quot;index&quot;:{&quot;_id&quot;:&quot;2&quot;}}
&amp;gt; {&quot;name&quot;:&quot;Jane Doe&quot;}'
{
  &quot;took&quot; : 99,
  &quot;errors&quot; : false,
  &quot;items&quot; : [
    {
      &quot;index&quot; : {
        &quot;_index&quot; : &quot;customer&quot;,
        &quot;_type&quot; : &quot;external&quot;,
        &quot;_id&quot; : &quot;1&quot;,
        &quot;_version&quot; : 1,
        &quot;result&quot; : &quot;created&quot;,
        &quot;_shards&quot; : {
          &quot;total&quot; : 2,
          &quot;successful&quot; : 1,
          &quot;failed&quot; : 0
        },
        &quot;created&quot; : true,
        &quot;status&quot; : 201
      }
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;업데이트와 삭제를 배치로 처리&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST &quot;localhost:9200/customer/external/_bulk?pretty&quot;\
&amp;gt; -d '{&quot;update&quot;:{&quot;_id&quot;:&quot;1&quot;}}
&amp;gt; {&quot;doc&quot;: { &quot;name&quot;: &quot;John Doe becomes Jane Doe&quot; } }
&amp;gt; {&quot;delete&quot;:{&quot;_id&quot;:&quot;2&quot;}}'
{
  &quot;took&quot; : 26,
  &quot;errors&quot; : false,
  &quot;items&quot; : [
    {
      &quot;update&quot; : {
        &quot;_index&quot; : &quot;customer&quot;,
        &quot;_type&quot; : &quot;external&quot;,
        &quot;_id&quot; : &quot;1&quot;,
        &quot;_version&quot; : 2,
        &quot;result&quot; : &quot;updated&quot;,
        &quot;_shards&quot; : {
          &quot;total&quot; : 2,
          &quot;successful&quot; : 1,
          &quot;failed&quot; : 0
        },
        &quot;status&quot; : 200
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
출처 : &lt;a href=&quot;https://www.elastic.co/guide/kr/elasticsearch/reference/current/gs-exploring-cluster.html&quot;&gt;https://www.elastic.co/guide/kr/elasticsearch/reference/current/gs-exploring-cluster.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 May 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Elasticsearch 시작하기</title>
        <link>/elastic/2018/05/01/001.html</link>
        <guid isPermaLink="true">/elastic/2018/05/01/001.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Elasticsearch의 기본개념에 대해 알아보고 CentOS 7에 설치해보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Elasticsearch 기본개념&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;NRT(Near Realtime)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Elasticsearch는 NRT 검색 플랫폼&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클러스터&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하나 이상의 노드(서버)가 모인 것&lt;/li&gt;
  &lt;li&gt;고유한 이름으로 식별되며 기본 이름은 “elasticsearch”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;노드&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클러스터에 포함된 단일 서버&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인덱스&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;단일 클러스터에 원하는 개수의 인덱스 정의 가능&lt;/li&gt;
  &lt;li&gt;RDB에 database에 해당&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;타입&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 인덱스에서 하나 이상의 타입 정의 가능&lt;/li&gt;
  &lt;li&gt;RDB에 table에 해당&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;도큐먼트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;도큐먼트는 인덱싱할 수 있는 기본 정보 단위&lt;/li&gt;
  &lt;li&gt;JSON형태&lt;/li&gt;
  &lt;li&gt;하나의 인덱스/타입에 원하는 개수의 도큐먼트 저장 가능&lt;/li&gt;
  &lt;li&gt;RDB에 row에 해당&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;샤드 &amp;amp; 리플리카&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인덱스를 샤드라는 조각으로 분할하여 저장&lt;/li&gt;
  &lt;li&gt;샤드에 대한 복사본을 리플리카라고 함&lt;/li&gt;
  &lt;li&gt;인덱스가 생성된 다음 리플리카는 언제든 변경 가능하지만, 샤드 수는 사후 변경 불가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Elasticsearch 설치&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Elasticsearch는 Java 8 이상이 필요&lt;/li&gt;
  &lt;li&gt;CentOS 7 기준 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Java 설치&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum localinstall -y jdk-8u77-linux-x64.rpm
$ cd /usr/java
$ sudo ln -s /usr/java/default java8
$ java -version
java version &quot;1.8.0_77&quot;
Java(TM) SE Runtime Environment (build 1.8.0_77-b03)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Elasticsearch 설치&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -x http://proxy.yourhost:port -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.3.tar.gz
$ tar -xvf elasticsearch-5.4.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[참고] 메모리가 부족한 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;elasticsearch-5.4.3/config/jvm.options&lt;/code&gt; 에서 heap size 수정&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Xms1g
-Xmx1g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Elasticsearch 실행&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;“FxRG3ga”라는 노드가 실행
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd elasticsearch-5.4.3/bin
$ ./elasticsearch
[2018-05-01T01:25:58,835][INFO ][o.e.e.NodeEnvironment    ] [FxRG3ga] using [1] data paths, mounts [[/ (rootfs)]], net usable_space [45gb], net total_space [49.9gb], spins? [unknown], types [rootfs]
[2018-05-01T01:25:58,837][INFO ][o.e.e.NodeEnvironment    ] [FxRG3ga] heap size [1007.3mb], compressed ordinary object pointers [true]
[2018-05-01T01:25:58,839][INFO ][o.e.n.Node               ] node name [FxRG3ga] derived from node ID [FxRG3gaDRHWfqpaQR6noNQ]; set [node.name] to override
[2018-05-01T01:25:58,840][INFO ][o.e.n.Node               ] version[5.4.3], pid[25964], build[eed30a8/2017-06-22T00:34:03.743Z], OS[Linux/3.10.0-693.21.1.el7.x86_64/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_77/25.77-b03]
[2018-05-01T01:25:58,840][INFO ][o.e.n.Node               ] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+DisableExplicitGC, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -Djdk.io.permissionsUseCanonicalPath=true, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Dlog4j.skipJansi=true, -XX:+HeapDumpOnOutOfMemoryError, -Des.path.home=/home/deploy/tmp/elasticsearch-5.4.3]
[2018-05-01T01:26:02,151][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [aggs-matrix-stats]
[2018-05-01T01:26:02,152][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [ingest-common]
[2018-05-01T01:26:02,153][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [lang-expression]
[2018-05-01T01:26:02,153][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [lang-groovy]
[2018-05-01T01:26:02,153][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [lang-mustache]
[2018-05-01T01:26:02,153][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [lang-painless]
[2018-05-01T01:26:02,153][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [percolator]
[2018-05-01T01:26:02,154][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [reindex]
[2018-05-01T01:26:02,154][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [transport-netty3]
[2018-05-01T01:26:02,154][INFO ][o.e.p.PluginsService     ] [FxRG3ga] loaded module [transport-netty4]
[2018-05-01T01:26:02,156][INFO ][o.e.p.PluginsService     ] [FxRG3ga] no plugins loaded
[2018-05-01T01:26:04,213][INFO ][o.e.d.DiscoveryModule    ] [FxRG3ga] using discovery type [zen]
[2018-05-01T01:26:05,382][INFO ][o.e.n.Node               ] initialized
[2018-05-01T01:26:05,382][INFO ][o.e.n.Node               ] [FxRG3ga] starting ...
[2018-05-01T01:26:05,601][INFO ][o.e.t.TransportService   ] [FxRG3ga] publish_address {127.0.0.1:9300}, bound_addresses {127.0.0.1:9300}
[2018-05-01T01:26:08,729][INFO ][o.e.c.s.ClusterService   ] [FxRG3ga] new_master {FxRG3ga}{FxRG3gaDRHWfqpaQR6noNQ}{bDF_nP_QR2qUgN_fZS1rgQ}{127.0.0.1}{127.0.0.1:9300}, reason: zen-disco-elected-as-master ([0] nodes joined)
[2018-05-01T01:26:08,784][INFO ][o.e.h.n.Netty4HttpServerTransport] [FxRG3ga] publish_address {127.0.0.1:9200}, bound_addresses {127.0.0.1:9200}
[2018-05-01T01:26:08,793][INFO ][o.e.g.GatewayService     ] [FxRG3ga] recovered [0] indices into cluster_state
[2018-05-01T01:26:08,791][INFO ][o.e.n.Node               ] [FxRG3ga] started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클러스터 또는 노드 이름 설정&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./elasticsearch -Ecluster.name=my_cluster_name -Enode.name=my_node_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl http://localhost:9200/
{
  &quot;name&quot; : &quot;FxRG3ga&quot;,
  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,
  &quot;cluster_uuid&quot; : &quot;zZzodj6uRA2p21N9BNAkpQ&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;5.4.3&quot;,
    &quot;build_hash&quot; : &quot;eed30a8&quot;,
    &quot;build_date&quot; : &quot;2017-06-22T00:34:03.743Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;6.5.1&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
출처 : &lt;a href=&quot;https://www.elastic.co/guide/kr/elasticsearch/reference/current/getting-started.html&quot;&gt;https://www.elastic.co/guide/kr/elasticsearch/reference/current/getting-started.html&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 01 May 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>VirtualBox 설치하기</title>
        <link>/linux/2018/04/29/002.html</link>
        <guid isPermaLink="true">/linux/2018/04/29/002.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;CentOS 7 에 VirtualBox 설치해보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;VirtualBox repo 추가&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /etc/yum.repos.d/
$ sudo wget http://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;proxy가 있는 경우 : &lt;code class=&quot;highlighter-rouge&quot;&gt;-e use_proxy=yes -e http_proxy=http://proxy.yourhost:port&lt;/code&gt; 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum repolist
$ yum list VirtualBox*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;원하는 VirtualBox 버전 선택&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt; VirtualBox install&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install VirtualBox-5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;yum proxy 설정 : &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/yum.conf&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy=http://proxy.yourhost:port&lt;/code&gt; 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[참고] 의존성 라이브러리 rpm으로 직접 설치&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rpm -ivh 패키지명
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>도커 서비스 구성하기</title>
        <link>/docker/2018/04/29/001.html</link>
        <guid isPermaLink="true">/docker/2018/04/29/001.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;docker-compose.yml 을 사용하여 도커 서비스를 구성하고 실행해보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;도커의 서비스란?&lt;/h2&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;“프로덕션 컨테이너”로 실제 서비스의 기능 블럭&lt;/li&gt;
  &lt;li&gt;어떤 포트들을 사용해야 하는지 얼마나 많은 컨테이 복제본들을 실행해야 하는지 정의&lt;/li&gt;
  &lt;li&gt;서비스 확장 시, 프로세스의 서비스는 해당 소프트웨어를 실행하는 컨테이너 인스턴스의 수 증가&lt;/li&gt;
  &lt;li&gt;도커는 서비스 확장과 실행을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;docker-compose.yml 파일 작성하기&lt;/h2&gt;

&lt;hr /&gt;
&lt;h3&gt;docker-compose 설치&lt;/h3&gt;

&lt;p&gt;Linux 기준 Compose 설치&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;proxy를 사용하는 경우: -x http://proxy.yourhost:port 를 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
$ docker-compose --version # test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;docker-compose.yml&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;파일은 도커 컨테이너들이 서비스에서 어떻게 작동하는지 정의하는 YAML 파일&lt;/li&gt;
  &lt;li&gt;앞에서 만들었던 &lt;a href=&quot;https://imgithubpro.github.io/docker/2018/04/28/001.html&quot;&gt;username/repo:tag&lt;/a&gt; 이미지를 사용해서 실습
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3&quot;
services:
web:
  # replace username/repo:tag with your name and image details
  image: username/repo:tag
  deploy:
    replicas: 5
    resources:
      limits:
        cpus: &quot;0.1&quot; # 10% of the CPU
        memory: 50M
    restart_policy:
      condition: on-failure
  ports:
    - &quot;80:80&quot;
  networks:
    - webnet
networks:
webnet:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;새로운 로드밸런스된 앱을 실행하기&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stack deploy&lt;/code&gt; 명령얼 사용하기 전에 아래 명령 수행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker swarm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getstartedlab&lt;/code&gt; 이라는 이름으로 앱을 실행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker statck deploy -c docker-compose.yml getstartedlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;우리가 설정가 앱은 각 호스트당 배포된 이미지가 5개의 컨테이너 인스턴스로 실행되는 싱글 서비스 스택으로 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서비스 아이디 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; 서비스의 결과를 확인해보면 서비스의 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;getstartedlab_web&lt;/code&gt;으로 출력&lt;/li&gt;
  &lt;li&gt;서비스에서 실행되는 각 단일 컨테이너가 테스크&lt;/li&gt;
  &lt;li&gt;테스크는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;파일에 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;replicas&lt;/code&gt; 갯수만큼 순차적으로 증가하는 유니크한 아이디를 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해당 서비스의 테스크 아이디 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service ps getstartedlab_web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;필터 없이 모든 서비스 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker container ls -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;인스턴스 결과 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -4 http://localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;컨테이너는 각 요청마다 라운드로빈 방식으로 선택&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;앱 스케일 수정&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;replicas&lt;/code&gt;를 수정 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker statck deploy&lt;/code&gt; 명령으로 다시 실행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack deploy -c docker-compose.yml getstartedlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;도커는 해당 스택을 다운시키거나 킬 시킬필요 없이 업데이트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;앱 종료&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stack rm&lt;/code&gt;명령으로 앱 다운&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack rm getstartedlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;swarm 다운&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker swarm leave --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;사용한 명령어 정리&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stack ls                                            # List stacks or apps
docker stack deploy -c &amp;lt;composefile&amp;gt; &amp;lt;appname&amp;gt;  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps &amp;lt;service&amp;gt;                  # List tasks associated with an app
docker inspect &amp;lt;task or container&amp;gt;                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm &amp;lt;appname&amp;gt;                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>도커를 이용한 간단한 앱 만들기</title>
        <link>/docker/2018/04/28/001.html</link>
        <guid isPermaLink="true">/docker/2018/04/28/001.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Dockerfile을 사용하여 컨테이너를 정의하여 실행해보자.&lt;br /&gt;생성한 이미지들을 리모트 저장소에 저장하고, 해당 이미지를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;도커 파일을 이용한 컨테이너 정의&lt;/h2&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;은 컨테이너의 환경 설정을 정의&lt;/li&gt;
  &lt;li&gt;디스크나 네트워크 인터페이스에 대한 접근을 가상화하여 환경 설정에 정의하여 시스템으로부터 분리&lt;/li&gt;
  &lt;li&gt;Dockerfile을 통해서 정의한 app은 어디서나 동일하게 실행 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;도커파일 정의하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;빈 디렉토리를 생성하여 그 안에 아래 3개의 파일들을 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD [&quot;python&quot;, &quot;app.py&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;requirements.txt&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flask
Redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;app.py&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
    try:
        visits = redis.incr(&quot;counter&quot;)
    except RedisError:
        visits = &quot;&amp;lt;i&amp;gt;cannot connect to Redis, counter disabled&amp;lt;/i&amp;gt;&quot;

    html = &quot;&amp;lt;h3&amp;gt;Hello {name}!&amp;lt;/h3&amp;gt;&quot; \
           &quot;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; {hostname}&amp;lt;br/&amp;gt;&quot; \
           &quot;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; {visits}&quot;
    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)

if __name__ == &quot;__main__&quot;:
    app.run(host='0.0.0.0', port=80)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;앱 빌드하기&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;빌드를 위한 디렉토리 구조&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls
Dockerfile		app.py			requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/build/&quot;&gt;docker build&lt;/a&gt; 명령을 통해  Dockerfile로부터 이미지를 빌드&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;옵션을 사용해서 tag로 사용할 이름을 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t friendlyhello .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;생성된 이미지 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
REPOSITORY                TAG                 IMAGE ID            
friendlyhello             latest              c2e684e3c029    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[참고] 프록시 서버 설정&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;해당 서버 앞에 프록시 서버가 설정된 경우 ENV 명령을 통해서 Dockerfile에 해당 프록시 설정 추가&lt;/li&gt;
  &lt;li&gt;위에 Dockerfile에 EVN 설정 부분에 이어서 추가
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Set proxy server, replace host:port with values for your servers
ENV http_proxy host:port
ENV https_proxy host:port
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;앱 실행하기&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/run/&quot;&gt;docker run&lt;/a&gt; 명령을 통해 앱을 실행&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;옵션을 통해 머신의 4000 포트와 컨테이너의 80 포트를 매핑&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -p 4000:80 friendlyhello # &amp;lt;host port&amp;gt;:&amp;lt;container port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;파이썬의 해당 앱은 컨테이너 안에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://0.0.0.0:80&lt;/code&gt;에서 서비스&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt; URL로 컨테이너는 서비스하며 실제 80포트와의 매핑은 숨겨짐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+C&lt;/code&gt;로 종료&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해당 페이지 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl http://localhost:4000
&amp;lt;h3&amp;gt;Hello World!&amp;lt;/h3&amp;gt;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; 07e1a6d098ac&amp;lt;br/&amp;gt;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;cannot connect to Redis, counter disabled&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;앱을 백그라운드로 실행&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;옵션을 사용하면 detached mode로 데몬 상태로 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 4000:80 friendlyhello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행중인 컨테이너 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED
07e1a6d098ac        friendlyhello       &quot;python app.py&quot;     About an hour ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 컨테이너 정지&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONTAINER ID&lt;/code&gt;를 사용해서 &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/container_stop/&quot;&gt;docker container stop&lt;/a&gt; 으로 해당 프로세스를 정지&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker container stop 07e1a6d098ac
07e1a6d098ac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;이미지 공유하기&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;생성한 이미지를 다른 곳에서 실행하기 위해 도커 레지스트리 사용&lt;/li&gt;
  &lt;li&gt;도커 레지스트리는 리포지토리들의 집합&lt;/li&gt;
  &lt;li&gt;리포지토리는 이미지들의 집합&lt;/li&gt;
  &lt;li&gt;도커 레지스트리 이외에도 도커는 도커 허브를 제공&lt;/li&gt;
  &lt;li&gt;도커 허브는 도커가 제공하는 공개된 이미지 저장소로 회원 가입으로 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;도커 아이디로 로그인하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.docker.com&quot;&gt;https://cloud.docker.com&lt;/a&gt; 을 통해서 회원 가입 후에 해당 아이디를 통해 로컬 머신에서 공개된 레지스트리로 로그인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;이미지 태그하기&lt;/h3&gt;

&lt;p&gt;레지스트리에 리포지토리 형식 : &lt;code class=&quot;highlighter-rouge&quot;&gt;username/repository:tag&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker tag image username/repository:tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용 예시&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker tag friendlyhello john/get-started:part2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/image_ls/&quot;&gt;docker image ls&lt;/a&gt; 로 새롭게 태그된 이미지 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE
friendlyhello             latest              c2e684e3c029        29 hours ago        151 MB
john/get-started          part2               c2e684e3c029        29 hours ago        151 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;이미지 업로드하기&lt;/h3&gt;

&lt;p&gt;리포지토리에 태그된 이미지를 업로드 : &lt;a href=&quot;https://cloud.docker.com&quot;&gt;Docker Hub&lt;/a&gt; 에서 확인 가능&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker push username/repository:tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;리모트 리포지토리 이미지로 실행하기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; 으로 앱 실행 시&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;로컬 머신에 해당 이미지가 없는 경우 도커는 리포지토리에서 pull &amp;amp; run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -p 4000:80 username/repository:tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;사용한 명령어 정리&lt;/h2&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run &quot;friendlyname&quot; mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop &amp;lt;hash&amp;gt;           # Gracefully stop the specified container
docker container kill &amp;lt;hash&amp;gt;         # Force shutdown of the specified container
docker container rm &amp;lt;hash&amp;gt;        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm &amp;lt;image id&amp;gt;            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag &amp;lt;image&amp;gt; username/repository:tag  # Tag &amp;lt;image&amp;gt; for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Apr 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>도커 설치 &amp; hello world</title>
        <link>/docker/2018/04/27/001.html</link>
        <guid isPermaLink="true">/docker/2018/04/27/001.html</guid>
        <description>&lt;blockquote&gt;
  &lt;p&gt;CentOS 7 기준으로 도커를 설치하고, 간단한 hello-world 예제 실행해보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;도커란 무엇인가&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;컨테이너 기반으로 애플리케이션을 개발, 배포, 실행할 수 있게 해주는 플랫폼&lt;/p&gt;
&lt;h3&gt;이미지와 컨테이너&lt;/h3&gt;
&lt;h4&gt;이미지&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션이 실행되는데 필요한 모든 것이 포함된 실행가능한 패키지&lt;/li&gt;
  &lt;li&gt;코드, 런타임 라이브러리, 환경 변수, 설정 파일 등을 포함&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;컨테이너&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;컨테이너는 이미지를 실행한 상태&lt;/li&gt;
  &lt;li&gt;이미지의 런타임 인스턴스&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 명령을 통해서 실행중인 컨테이너 리스트 확인
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;컨테이너와 가상머신&lt;/h3&gt;
&lt;h4&gt;컨테이너&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;리눅스에서 호스트 머신의 커널을 다른 컨테이너들과 공유하며 네이티브로 실행&lt;/li&gt;
  &lt;li&gt;개별 프로세스로 실행&lt;/li&gt;
  &lt;li&gt;애플리케이션에 필요한 메모리만을 사용하여 가벼움&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;가상머신(Virtual machine)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;하이퍼바이저를 통해 호스트 리소스에 대한 가상 액세스 권한을 가진 “게스트” 운영 체제를 실행&lt;/li&gt;
  &lt;li&gt;일반적으로 애플리케이션에서 필요한 것보다 많은 리소스 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post/container.png&quot; width=&quot;300&quot; /&gt;
&lt;img src=&quot;/assets/img/post/vm.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;설치하기&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;os 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep . /etc/*-release
/etc/centos-release:CentOS Linux release 7.4.1708 (Core)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;CentOS 7 기준&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo yum install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;버전 확인&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker -v # --version
Docker version 1.13.1, build 774336d/1.13.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;sudo 없이 docker 명령어 실행을 위한 docker 그룹 설정&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo groupadd docker
$ sudo gpasswd -a ${USER} docker
$ sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;hello-world&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;이미지 리스트&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;hello-world 실행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;이미지기 없는 경우 자동으로 pull 된 후에 실행&lt;/li&gt;
  &lt;li&gt;이미지 리스트에 다운된 hello-world가 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
docker.io/hello-world   latest              e38bc07ac18e        2 weeks ago         1.85 kB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;컨테이너 리스트&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker container ls # --all or -aq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;사용한 명령어 정리&lt;/h2&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
참고 : &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
